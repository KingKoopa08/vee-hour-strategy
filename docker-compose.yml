version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: trading-db
    environment:
      POSTGRES_DB: trading_analysis
      POSTGRES_USER: trader
      POSTGRES_PASSWORD: trading_secure_pass_2024
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5434:5432"
    networks:
      - trading-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trader"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: trading-cache
    ports:
      - "6379:6379"
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: trading-backend
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://trader:trading_secure_pass_2024@postgres:5432/trading_analysis
      REDIS_URL: redis://redis:6379
      POLYGON_API_KEY: AhYeb0tc72ti39yZpxdNpoZx6_CD9IYW
      PORT: 3001
      WS_PORT: 3002
    ports:
      - "3001:3001"
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - trading-network
    volumes:
      - ./backend:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: trading-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_WS_URL: ws://localhost:3002
      PORT: 3000
      HOSTNAME: 0.0.0.0
    ports:
      - "3010:3000"
    depends_on:
      - backend
    networks:
      - trading-network
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  trading-network:
    driver: bridge

volumes:
  postgres_data: